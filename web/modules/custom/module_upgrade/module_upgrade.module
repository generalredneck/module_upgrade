<?php

/**
 * @file
 * Contains module_upgrade.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function module_upgrade_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the module_upgrade module.
    case 'help.page.module_upgrade':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the main system for running a Module Upgrade Drupal project updating system.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function module_upgrade_taxonomy_term_insert(EntityInterface $term) {
  if ($term->bundle() == 'project') {
  kpr('here');
    /** @var QueueFactory $queue_factory */
    $queue_factory = \Drupal::service('queue');
    /** @var QueueInterface $queue */
    $queue = $queue_factory->get('module_upgrade_project_releases');
    $item = new \stdClass();
    $item->tid = $term->id();
    $queue->createItem($item);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function module_upgrade_taxonomy_term_update(EntityInterface $term) {
  if ($term->bundle() == 'project') {
    module_upgrade_taxonomy_term_insert($term);
  }
}

/**
 * Implements hook_entity_presave().
 */
function module_upgrade_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'entity' && in_array($entity->bundle(), ['project_update_record', 'project_installed_record'])) {
    module_upgrade_fill_in_project_version_fields($entity);
  }
}

/**
 * Populate the major, patch, and extra fields when saving project nodes.
 */
function module_upgrade_fill_in_project_version_fields(EntityInterface $project) {
  $version_extra_strings = [
    'dev' => 1,
    'a' => 2,
    'alpha' => 2,
    'b' => 3,
    'beta' => 3,
    'rc' => 4,
    '' => 5,
    'p' => 6,
    'pl' => 6,
  ];
  $version_parts = explode('.', $project->field_project_version->value);
  $project->field_project_version_major->value = array_shift($version_parts);
  $last_part = array_pop($version_parts);
  $last_part_parts = explode('-', $last_part);
  $project->field_project_version_patch->value = array_shift($last_part_parts);
  $project->field_project_version_extra->value = implode('', $last_part_parts);
  $extra_string = preg_replace("/[^a-z]/", '', strtolower($project->field_project_version_extra->value));
  $project->field_project_version_extra_tran->value = isset($version_extra_strings[$extra_string]) ? $version_extra_strings[$extra_string] : 0;
  $extra_num = preg_replace("/[^0-9]/", '', strtolower($project->field_project_version_extra->value));
  $project->field_project_version_extra_num->value = empty($extra_num) ? 0 : $extra_num;
}
